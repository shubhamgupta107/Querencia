#lang racket/gui
(provide (all-defined-out))
(require 2htdp/image)
(require images/icons/style)

(define (my-bitmap source type scale) (make-object bitmap% source type #f #f scale))
(define send-pic (bitmap-render-icon (my-bitmap "images/send.png" 'png 2) 1 glass-icon-material))
(define exit (bitmap-render-icon (my-bitmap "images/exit.jpg" 'jpeg 8) 1 rubber-icon-material))
(define background (bitmap "images/possible-interfaces/dark-background-1.png"))
(define welcome-background (bitmap "images/welcome-background-instructions.jpg"))
(define starting-button1-rest (my-bitmap "images/possible-interfaces/button1-rest.png" 'png 1))
(define starting-button1-hover (my-bitmap "images/possible-interfaces/button1-hover.png" 'png 1))
(define starting-button1-down (my-bitmap "images/possible-interfaces/button1-down.png" 'png 1))
(define starting-button2-rest (my-bitmap "images/possible-interfaces/button2-rest.png" 'png 1))
(define starting-button2-hover (my-bitmap "images/possible-interfaces/button2-hover.png" 'png 1))
(define starting-button2-down (my-bitmap "images/possible-interfaces/button2-down.png" 'png 1))
(define starting-button3-rest (my-bitmap "images/possible-interfaces/button3-rest.png" 'png 1))
(define starting-button3-hover (my-bitmap "images/possible-interfaces/button3-hover.png" 'png 1))
(define starting-button3-down (my-bitmap "images/possible-interfaces/button3-down.png" 'png 1))
(define about-users-rest (bitmap "images/about-users-rest.png"))
(define about-users-hover (bitmap "images/about-users-hover.png"))
(define about-users-down (bitmap "images/about-users-down.png"))
(define about-back-rest (bitmap "images/about-back-rest.png"))
(define about-back-hover (bitmap "images/about-back-hover.png"))
(define about-back-down (bitmap "images/about-back-down.png"))
(define about-background (bitmap "images/about-background.png"))
(define main-background (bitmap "images/possible-interfaces/main-background.jpg"))
(define be-a-user-rest (bitmap "images/possible-interfaces/be-a-user-rest.png"))
(define be-a-user-hover (bitmap "images/possible-interfaces/be-a-user-hover.png"))
(define be-a-user-down (bitmap "images/possible-interfaces/be-a-user-down.png"))
(define be-a-host-rest (bitmap "images/possible-interfaces/be-a-host-rest.png"))
(define be-a-host-hover (bitmap "images/possible-interfaces/be-a-host-hover.png"))
(define be-a-host-down (bitmap "images/possible-interfaces/be-a-host-down.png"))
(define login-rest (bitmap "images/possible-interfaces/login-rest.png"))
(define login-hover (bitmap "images/possible-interfaces/login-hover.png"))
(define login-down (bitmap "images/possible-interfaces/login-down.png"))
(define signup-rest (bitmap "images/possible-interfaces/signup-rest.png"))
(define signup-hover (bitmap "images/possible-interfaces/signup-hover.png"))
(define signup-down (bitmap "images/possible-interfaces/signup-down.png"))
(define back-rest (bitmap "images/possible-interfaces/back-rest.png"))
(define back-hover (bitmap "images/possible-interfaces/back-hover.png"))
(define back-down (bitmap "images/possible-interfaces/back-down.png"))
(define wall-background (bitmap "images/wall_background.png"))
(define default-profile-pic (bitmap "images/default-profile-pic.png"))
(define start-chat-rest (bitmap "images/start_a_chat_rest.png"))
(define start-chat-hover (bitmap "images/start_a_chat_hover.png"))
(define start-chat-down (bitmap "images/start_a_chat_down.png"))
(define play-mancala-rest (bitmap "images/play_mancala_online_rest.png"))
(define play-mancala-hover (bitmap "images/play_mancala_online_hover.png"))
(define play-mancala-down (bitmap "images/play_mancala_online_down.png"))
(define play-word-search-rest (bitmap "images/play_word_search_rest.png"))
(define play-word-search-hover (bitmap "images/play_word_search_hover.png"))
(define play-word-search-down (bitmap "images/play_word_search_down.png"))
(define online-settings-rest (bitmap "images/settings_rest.png"))
(define online-settings-hover (bitmap "images/settings_hover.png"))
(define online-settings-down (bitmap "images/settings_down.png"))
(define help-online-rest (bitmap "images/help_rest.png"))
(define help-online-hover (bitmap "images/help_hover.png"))
(define help-online-down (bitmap "images/help_down.png"))
(define change-profile-pic-rest (bitmap "images/change_profile_pic-rest.png"))
(define change-profile-pic-hover (bitmap "images/change_profile_pic-hover.png"))
(define change-profile-pic-down (bitmap "images/change_profile_pic-down.png"))
(define go-offline-rest (bitmap "images/signout_rest.png"))
(define go-offline-hover (bitmap "images/signout_hover.png"))
(define go-offline-down (bitmap "images/signout_down.png"))
(define online-settings-background (bitmap "images/online-settings-background.png"))
(define change-password-rest (bitmap "images/change-password-rest.png"))
(define change-password-hover (bitmap "images/change-password-hover.png"))
(define change-password-down (bitmap "images/change-password-down.png"))
(define change-status-rest (bitmap "images/change-status-rest.png"))
(define change-status-hover (bitmap "images/change-status-hover.png"))
(define change-status-down (bitmap "images/change-status-down.png"))
(define change-details-rest (bitmap "images/personal_information-rest.png"))
(define change-details-hover (bitmap "images/personal_information-hover.png"))
(define change-details-down (bitmap "images/personal_information-down.png"))
(define settings-back-rest (bitmap "images/settings-back-rest.png"))
(define settings-back-hover (bitmap "images/settings-back-hover.png"))
(define settings-back-down (bitmap "images/settings-back-down.png"))
(define user-account-frame-back (bitmap "images/user-account-frame-background.png"))
(define user-acc-back-rest (bitmap "images/user-acc-back-rest.png"))
(define user-acc-back-hover (bitmap "images/user-acc-back-hover.png"))
(define user-acc-back-down (bitmap "images/user-acc-back-down.png"))
(define online-help-background (bitmap "images/online-help-background.png"))
(define q-icon (my-bitmap "images/q-icon.png" 'png 1))

(define (resize-appropriately image max-image-size)
  (let* ([w (image-width image)]
         [h (image-height image)]
         [s (cond [(and (< w max-image-size) (< h max-image-size)) 1]
                  [(> w h) (/ max-image-size w)]
                  [else (/ max-image-size h)])])
    (scale s image)))

(define (store-image image save-path number)
  (let ([image-path (string-append save-path (number->string number) ".png")])
    (if (file-exists? image-path)
        (store-image image save-path (+ number 1))
        (save-image image image-path))))

